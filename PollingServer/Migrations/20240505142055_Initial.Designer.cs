// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PollingServer.Models;

#nullable disable

namespace PollingServer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240505142055_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PollingServer.Models.Poll.Answer.SelectFieldResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnswerTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SelectFieldQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SelectFieldQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("SelectFieldResponse");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Answer.TextFieldResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnswerTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextFieldQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TextFieldQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("TextFieldResponse");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.PollAllowedUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId");

                    b.ToTable("PollAllowedUsers");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Question.PollQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderRate")
                        .HasColumnType("int");

                    b.Property<int?>("PollId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TextQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("SelectQuestionId");

                    b.HasIndex("TextQuestionId");

                    b.ToTable("PollQuestion");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Question.SelectFieldQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SelectFieldQuestion");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Question.TextFieldQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FieldPlaceholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextFieldQuestion");
                });

            modelBuilder.Entity("PollingServer.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PollingServer.Models.User.UserBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBan");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Answer.SelectFieldResponse", b =>
                {
                    b.HasOne("PollingServer.Models.Poll.Question.SelectFieldQuestion", null)
                        .WithMany("Responses")
                        .HasForeignKey("SelectFieldQuestionId");

                    b.HasOne("PollingServer.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Answer.TextFieldResponse", b =>
                {
                    b.HasOne("PollingServer.Models.Poll.Question.TextFieldQuestion", null)
                        .WithMany("Responses")
                        .HasForeignKey("TextFieldQuestionId");

                    b.HasOne("PollingServer.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Poll", b =>
                {
                    b.HasOne("PollingServer.Models.User.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.PollAllowedUsers", b =>
                {
                    b.HasOne("PollingServer.Models.Poll.Poll", null)
                        .WithMany("UsersEligibility")
                        .HasForeignKey("PollId");

                    b.HasOne("PollingServer.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Question.PollQuestion", b =>
                {
                    b.HasOne("PollingServer.Models.Poll.Poll", null)
                        .WithMany("Questions")
                        .HasForeignKey("PollId");

                    b.HasOne("PollingServer.Models.Poll.Question.SelectFieldQuestion", "SelectQuestion")
                        .WithMany()
                        .HasForeignKey("SelectQuestionId");

                    b.HasOne("PollingServer.Models.Poll.Question.TextFieldQuestion", "TextQuestion")
                        .WithMany()
                        .HasForeignKey("TextQuestionId");

                    b.Navigation("SelectQuestion");

                    b.Navigation("TextQuestion");
                });

            modelBuilder.Entity("PollingServer.Models.User.UserBan", b =>
                {
                    b.HasOne("PollingServer.Models.User.User", null)
                        .WithMany("Bans")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Poll", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UsersEligibility");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Question.SelectFieldQuestion", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("PollingServer.Models.Poll.Question.TextFieldQuestion", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("PollingServer.Models.User.User", b =>
                {
                    b.Navigation("Bans");
                });
#pragma warning restore 612, 618
        }
    }
}
